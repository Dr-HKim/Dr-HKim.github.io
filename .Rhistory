BOK_items <- BOK_rootNode[[i]]
BOK_size <- xmlSize(BOK_items) # 몇개의 item 이 있는지 확인
for(j in 1:BOK_size){
BOK_item_temp <- xmlSApply(BOK_items[[j]],xmlValue)
BOK_item_temp_dt <- data.table(STAT=BOK_item_temp[1],
STAT_note=BOK_item_temp[2],
ITEM1=BOK_item_temp[3],
ITEM1_note=BOK_item_temp[4],
ITEM2=BOK_item_temp[5],
ITEM2_note=BOK_item_temp[6],
ITEM3=BOK_item_temp[7],
ITEM3_note=BOK_item_temp[8],
VAR9=BOK_item_temp[9],
VAR10=BOK_item_temp[10],
VAR11=BOK_item_temp[11])
BOK_item[[j]]<-BOK_item_temp_dt
}
BOK_total[[i]] <- rbindlist(BOK_item)
}
RESULTS <- rbindlist(BOK_total)
RESULTS <- RESULTS[which(!is.na(RESULTS$VAR2)),]
RESULTS$VAR12 <- as.numeric(as.character(RESULTS$VAR10))
RESULTS$VAR13 <- as.numeric(as.character(RESULTS$VAR11))
return(RESULTS)
}
# 전체자료: 기업경기실사지수(BSI)-전국실적
BOK9111 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y013", # 9.1.1.1 기업경기실사지수(BSI)-전국실적
ITEM_1="?",          # 전체
ITEM_2="?",          # 전체
ITEM_3="?")
MYBOK1 <- function(AUTH_KEY,REQ_TYPE,LANG,START_COUNT,END_COUNT,STAT_CODE,CYCLE_TYPE,START_DATE,END_DATE,ITEM_1,ITEM_2,ITEM_3){
BOK_urllist <- list()
BOK_urllist[[1]] <- paste0("http://ecos.bok.or.kr/api/StatisticSearch/",
AUTH_KEY,"/",REQ_TYPE,"/",LANG,"/",START_COUNT,"/",END_COUNT,"/",
STAT_CODE,"/",CYCLE_TYPE,"/",START_DATE,"/",END_DATE,"/",ITEM_1,"/",ITEM_2,"/",ITEM_3)
BOK_raw.data <- list()
BOK_rootNode <- list()
BOK_raw.data[[1]] <- xmlTreeParse(BOK_urllist[1], useInternalNodes = TRUE,encoding = "utf-8") # 생성한 URL 대로 XML 을 요청
BOK_rootNode[[1]] <- xmlRoot(BOK_raw.data[[1]])
BOK_total <- list()
for(i in 1:length(BOK_urllist)){
BOK_item <- list()
BOK_item_temp_dt <- data.table()
BOK_items <- BOK_rootNode[[i]]
BOK_size <- xmlSize(BOK_items) # 몇개의 item 이 있는지 확인
for(j in 1:BOK_size){
BOK_item_temp <- xmlSApply(BOK_items[[j]],xmlValue)
BOK_item_temp_dt <- data.table(VAR1=BOK_item_temp[1],
VAR2=BOK_item_temp[2],
VAR3=BOK_item_temp[3],
VAR4=BOK_item_temp[4],
VAR5=BOK_item_temp[5],
VAR6=BOK_item_temp[6],
VAR7=BOK_item_temp[7],
VAR8=BOK_item_temp[8],
VAR9=BOK_item_temp[9],
VAR10=BOK_item_temp[10],
VAR11=BOK_item_temp[11])
BOK_item[[j]]<-BOK_item_temp_dt
}
BOK_total[[i]] <- rbindlist(BOK_item)
}
RESULTS <- rbindlist(BOK_total)
RESULTS <- RESULTS[which(!is.na(RESULTS$VAR2)),]
RESULTS$VAR12 <- as.numeric(as.character(RESULTS$VAR10))
RESULTS$VAR13 <- as.numeric(as.character(RESULTS$VAR11))
return(RESULTS)
}
# 전체자료: 기업경기실사지수(BSI)-전국실적
BOK9111 <- MYBOK1(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y013", # 9.1.1.1 기업경기실사지수(BSI)-전국실적
ITEM_1="?",          # 전체
ITEM_2="?",          # 전체
ITEM_3="?")
names(BOK9111)
BOK91112 <- BOK9111
names(BOK91112) <- c("STAT","STAT_note","ITEM1","ITEM1_note","ITEM2","ITEM2_note","ITEM3","ITEM3_note","VAR9","VAR10","VAR11","VAR12","VAR13")
View(BOK91112)
MYBOK1 <- function(AUTH_KEY,REQ_TYPE,LANG,START_COUNT,END_COUNT,STAT_CODE,CYCLE_TYPE,START_DATE,END_DATE,ITEM_1,ITEM_2,ITEM_3){
BOK_urllist <- list()
BOK_urllist[[1]] <- paste0("http://ecos.bok.or.kr/api/StatisticSearch/",
AUTH_KEY,"/",REQ_TYPE,"/",LANG,"/",START_COUNT,"/",END_COUNT,"/",
STAT_CODE,"/",CYCLE_TYPE,"/",START_DATE,"/",END_DATE,"/",ITEM_1,"/",ITEM_2,"/",ITEM_3)
BOK_raw.data <- list()
BOK_rootNode <- list()
BOK_raw.data[[1]] <- xmlTreeParse(BOK_urllist[1], useInternalNodes = TRUE,encoding = "utf-8") # 생성한 URL 대로 XML 을 요청
BOK_rootNode[[1]] <- xmlRoot(BOK_raw.data[[1]])
BOK_total <- list()
for(i in 1:length(BOK_urllist)){
BOK_item <- list()
BOK_item_temp_dt <- data.table()
BOK_items <- BOK_rootNode[[i]]
BOK_size <- xmlSize(BOK_items) # 몇개의 item 이 있는지 확인
for(j in 1:BOK_size){
BOK_item_temp <- xmlSApply(BOK_items[[j]],xmlValue)
BOK_item_temp_dt <- data.table(VAR1=BOK_item_temp[1],
VAR2=BOK_item_temp[2],
VAR3=BOK_item_temp[3],
VAR4=BOK_item_temp[4],
VAR5=BOK_item_temp[5],
VAR6=BOK_item_temp[6],
VAR7=BOK_item_temp[7],
VAR8=BOK_item_temp[8],
VAR9=BOK_item_temp[9],
VAR10=BOK_item_temp[10],
VAR11=BOK_item_temp[11])
BOK_item[[j]]<-BOK_item_temp_dt
}
BOK_total[[i]] <- rbindlist(BOK_item)
}
RESULTS <- rbindlist(BOK_total)
RESULTS <- RESULTS[which(!is.na(RESULTS$VAR2)),]
RESULTS$VAR12 <- as.numeric(as.character(RESULTS$VAR10))
RESULTS$VAR13 <- as.numeric(as.character(RESULTS$VAR11))
names(RESULTS) <- c("STAT","STAT_note","ITEM1","ITEM1_note","ITEM2","ITEM2_note","ITEM3","ITEM3_note","VAR9","VAR10","VAR11","DATE","VALUE")
return(RESULTS)
}
MYBOK <- function(AUTH_KEY,REQ_TYPE,LANG,START_COUNT,END_COUNT,STAT_CODE,CYCLE_TYPE,START_DATE,END_DATE,ITEM_1,ITEM_2,ITEM_3){
BOK_urllist <- list()
BOK_urllist[[1]] <- paste0("http://ecos.bok.or.kr/api/StatisticSearch/",
AUTH_KEY,"/",REQ_TYPE,"/",LANG,"/",START_COUNT,"/",END_COUNT,"/",
STAT_CODE,"/",CYCLE_TYPE,"/",START_DATE,"/",END_DATE,"/",ITEM_1,"/",ITEM_2,"/",ITEM_3)
BOK_raw.data <- list()
BOK_rootNode <- list()
BOK_raw.data[[1]] <- xmlTreeParse(BOK_urllist[1], useInternalNodes = TRUE,encoding = "utf-8") # 생성한 URL 대로 XML 을 요청
BOK_rootNode[[1]] <- xmlRoot(BOK_raw.data[[1]])
BOK_total <- list()
for(i in 1:length(BOK_urllist)){
BOK_item <- list()
BOK_item_temp_dt <- data.table()
BOK_items <- BOK_rootNode[[i]]
BOK_size <- xmlSize(BOK_items) # 몇개의 item 이 있는지 확인
for(j in 1:BOK_size){
BOK_item_temp <- xmlSApply(BOK_items[[j]],xmlValue)
BOK_item_temp_dt <- data.table(VAR1=BOK_item_temp[1],
VAR2=BOK_item_temp[2],
VAR3=BOK_item_temp[3],
VAR4=BOK_item_temp[4],
VAR5=BOK_item_temp[5],
VAR6=BOK_item_temp[6],
VAR7=BOK_item_temp[7],
VAR8=BOK_item_temp[8],
VAR9=BOK_item_temp[9],
VAR10=BOK_item_temp[10],
VAR11=BOK_item_temp[11])
BOK_item[[j]]<-BOK_item_temp_dt
}
BOK_total[[i]] <- rbindlist(BOK_item)
}
RESULTS <- rbindlist(BOK_total)
RESULTS <- RESULTS[which(!is.na(RESULTS$VAR2)),]
RESULTS$VAR12 <- as.numeric(as.character(RESULTS$VAR10))
RESULTS$VAR13 <- as.numeric(as.character(RESULTS$VAR11))
names(RESULTS) <- c("STAT","STAT_note","ITEM1","ITEM1_note","ITEM2","ITEM2_note","ITEM3","ITEM3_note","VAR9","VAR10","VAR11","DATE","VALUE")
return(RESULTS)
}
# 전체자료: 기업경기실사지수(BSI)-전국실적
BOK9111 <- MYBOK1(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y013", # 9.1.1.1 기업경기실사지수(BSI)-전국실적
ITEM_1="?",          # 전체
ITEM_2="?",          # 전체
ITEM_3="?")
# 전체자료: 기업경기실사지수(BSI)-전국실적
BOK9111 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y013", # 9.1.1.1 기업경기실사지수(BSI)-전국실적
ITEM_1="?",          # 전체
ITEM_2="?",          # 전체
ITEM_3="?")
View(BOK9111)
View(BOK9111)
TMP1 <- BOK9111[which(BOK9111$ITEM1=="C0000" & BOK9111$ITEM2=="AA"),] # 제조업(C0000), 업황실적(AA)
TMP2 <- BOK9111[which(BOK9111$ITEM1=="Y9900" & BOK9111$ITEM2=="AA"),] # 비제조업(Y9900), 업황실적(AA)
View(TMP1)
plot.ts(TMP1$VALUE)
# 전체자료: 9.1.1.2 기업경기실사지수(BSI)-전국전망
BOK9112 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y014", # 9.1.1.2 기업경기실사지수(BSI)-전국전망
ITEM_1="?",ITEM_2="?",ITEM_3="?")
TMP3 <- BOK9112[which(BOK9111$ITEM1=="C0000" & BOK9111$ITEM2=="BA"),] # 제조업(C0000), 업황전망(BA)
TMP4 <- BOK9112[which(BOK9111$ITEM1=="Y9900" & BOK9111$ITEM2=="BA"),] # 비제조업(Y9900), 업황전망(BA)
View(TMP3)
View(BOK9112)
TMP3 <- BOK9112[which(BOK9112$ITEM1=="C0000" & BOK9112$ITEM2=="BA"),] # 제조업(C0000), 업황전망(BA)
TMP4 <- BOK9112[which(BOK9112$ITEM1=="Y9900" & BOK9112$ITEM2=="BA"),] # 비제조업(Y9900), 업황전망(BA)
View(TMP3)
View(TMP4)
View(TMP4)
# 전체자료: 12.15.1 기업경영분석(분기) - 성장성에 관한 지표(027Y215)
BOK12151 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="QQ",START_DATE="200301",END_DATE="201804",
STAT_CODE="027Y215", # 9.1.1.2 기업경기실사지수(BSI)-전국전망
ITEM_1="?",ITEM_2="?",ITEM_3="?")
View(BOK12151)
# 전체자료: 12.15.1 기업경영분석(분기) - 성장성에 관한 지표(027Y215)
BOK12151 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="QQ",START_DATE="20031",END_DATE="20184",
STAT_CODE="027Y215", # 9.1.1.2 기업경기실사지수(BSI)-전국전망
ITEM_1="?",ITEM_2="?",ITEM_3="?")
View(BOK12151)
TMP4$YYYYMM <- as.Date(as.character(TMP4$DATE), format = '%Y%m')
View(TMP4)
TMP4$YYYYMM <- as.Date(as.character(TMP4$DATE*100+1), format = '%Y%m%D')
View(TMP4)
TMP4$YYYYMM <- as.Date(as.character(TMP4$DATE*100+1), format = '%Y%m%d')
View(TMP4)
View(BOK9111)
TMP1 <- BOK9111[which(BOK9111$ITEM1=="X5000" & BOK9111$ITEM2=="AA"),] # 대기업(X5000), 업황실적(AA)
View(TMP1)
View(TMP1)
BOK9111_2 <- BOK9111
BOK9111_2$ITEM1ITEM2 <- paste(BOK9111_2$ITEM1,BOK9111_2$ITEM2)
View(BOK9111_2)
BOK9111_2$ITEM1ITEM2 <- paste0(BOK9111_2$ITEM1,BOK9111_2$ITEM2)
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2)
library(reshape2)
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2)
library(reshape)
# # 한국은행 4.1.2 시장금리(월,분기,년)
# install.packages('XML')
# install.packages('data.table')
# install.packages('stringr')
install.packages('reshape')
library(reshape)
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2)
BOK9111_2$Value <- BOK9111_2$VALUE
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2)
View(BOK9111_3)
?cast()
BOK9111_2 <- BOK9111
BOK9111_2$ITEM1ITEM2 <- paste0(BOK9111_2$ITEM1,BOK9111_2$ITEM2)
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2)
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2 ~VALUE)
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2 ~ value = VALUE )
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2, value = VALUE )
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2, value = "VALUE" )
BOK9111_2 <- BOK9111
BOK9111_2$ITEM1ITEM2 <- paste0(BOK9111_2$ITEM1,BOK9111_2$ITEM2)
BOK9111_3 <- cast(BOK9111_2,DATE~ITEM1ITEM2, value = "VALUE" )
View(BOK9111_3)
BOK9111_4 <- BOK9111_3[,c("DATE","C0000AA","Y9900AA")]
View(BOK9111_4)
View(BOK12151)
MYBOK <- function(AUTH_KEY,REQ_TYPE,LANG,START_COUNT,END_COUNT,STAT_CODE,CYCLE_TYPE,START_DATE,END_DATE,ITEM_1,ITEM_2,ITEM_3){
BOK_urllist <- list()
BOK_urllist[[1]] <- paste0("http://ecos.bok.or.kr/api/StatisticSearch/",
AUTH_KEY,"/",REQ_TYPE,"/",LANG,"/",START_COUNT,"/",END_COUNT,"/",
STAT_CODE,"/",CYCLE_TYPE,"/",START_DATE,"/",END_DATE,"/",ITEM_1,"/",ITEM_2,"/",ITEM_3)
BOK_raw.data <- list()
BOK_rootNode <- list()
BOK_raw.data[[1]] <- xmlTreeParse(BOK_urllist[1], useInternalNodes = TRUE,encoding = "utf-8") # 생성한 URL 대로 XML 을 요청
BOK_rootNode[[1]] <- xmlRoot(BOK_raw.data[[1]])
BOK_total <- list()
for(i in 1:length(BOK_urllist)){
BOK_item <- list()
BOK_item_temp_dt <- data.table()
BOK_items <- BOK_rootNode[[i]]
BOK_size <- xmlSize(BOK_items) # 몇개의 item 이 있는지 확인
for(j in 1:BOK_size){
BOK_item_temp <- xmlSApply(BOK_items[[j]],xmlValue)
BOK_item_temp_dt <- data.table(VAR1=BOK_item_temp[1],
VAR2=BOK_item_temp[2],
VAR3=BOK_item_temp[3],
VAR4=BOK_item_temp[4],
VAR5=BOK_item_temp[5],
VAR6=BOK_item_temp[6],
VAR7=BOK_item_temp[7],
VAR8=BOK_item_temp[8],
VAR9=BOK_item_temp[9],
VAR10=BOK_item_temp[10],
VAR11=BOK_item_temp[11])
BOK_item[[j]]<-BOK_item_temp_dt
}
BOK_total[[i]] <- rbindlist(BOK_item)
}
RESULTS <- rbindlist(BOK_total)
RESULTS <- RESULTS[which(!is.na(RESULTS$VAR2)),]
RESULTS$VAR12 <- as.numeric(as.character(RESULTS$VAR10))
RESULTS$VAR13 <- as.numeric(as.character(RESULTS$VAR11))
names(RESULTS) <- c("STAT","STAT_note","ITEM1","ITEM1_note","ITEM2","ITEM2_note","ITEM3","ITEM3_note","VAR9","VAR10","VAR11","DATE","VALUE")
RESULTS$ITEMCODE <- paste0(RESULTS$ITEM1,RESULTS$ITEM2,RESULTS$ITEM3)
return(RESULTS)
}
# 전체자료: 9.1.1.1 기업경기실사지수(BSI)-전국실적
BOK9111 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y013", # 9.1.1.1 기업경기실사지수(BSI)-전국실적
ITEM_1="?",ITEM_2="?",ITEM_3="?")
View(BOK9111)
# 전체자료: 9.1.1.2 기업경기실사지수(BSI)-전국전망
BOK9112 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y014", # 9.1.1.2 기업경기실사지수(BSI)-전국전망
ITEM_1="?",ITEM_2="?",ITEM_3="?")
View(BOK9112)
# 전체자료: 12.15.1 기업경영분석(분기) - 성장성에 관한 지표(027Y215)
BOK12151 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="QQ",START_DATE="20031",END_DATE="20184",
STAT_CODE="027Y215", # 9.1.1.2 기업경기실사지수(BSI)-전국전망
ITEM_1="?",ITEM_2="?",ITEM_3="?")
View(BOK12151)
BOK9111_CAST <- cast(BOK9111,DATE~ITEMCODE, value = "VALUE" )
BOK9112_CAST <- cast(BOK9112,DATE~ITEMCODE, value = "VALUE" )
View(BOK9111_CAST)
TMP <- merge(BOK9111_CAST[,c("DATE","C0000AA","Y9900AA","X5000AA","X6000AA")], BOK9112_CAST[,c("DATE","C0000BA","Y9900BA","X5000BA","X6000BA")], by="DATE")
TMP <- merge(BOK9111_CAST[,c("DATE","C0000AA","Y9900AA","X5000AA","X6000AA")], BOK9112_CAST[,c("DATE","C0000BA","Y9900BA","X5000BA","X6000BA")])
BOK9111_1 <- BOK9111_CAST[,c("DATE","C0000AA","Y9900AA","X5000AA","X6000AA")]
BOK9111_1 <- BOK9111_CAST[,c("DATE")]
BOK9111_1 <- BOK9111_CAST[,c("DATE","C0000AA")]
BOK9111_1 <- BOK9111_CAST[,c("DATE","C0000AA ")]
MYBOK <- function(AUTH_KEY,REQ_TYPE,LANG,START_COUNT,END_COUNT,STAT_CODE,CYCLE_TYPE,START_DATE,END_DATE,ITEM_1,ITEM_2,ITEM_3){
BOK_urllist <- list()
BOK_urllist[[1]] <- paste0("http://ecos.bok.or.kr/api/StatisticSearch/",
AUTH_KEY,"/",REQ_TYPE,"/",LANG,"/",START_COUNT,"/",END_COUNT,"/",
STAT_CODE,"/",CYCLE_TYPE,"/",START_DATE,"/",END_DATE,"/",ITEM_1,"/",ITEM_2,"/",ITEM_3)
BOK_raw.data <- list()
BOK_rootNode <- list()
BOK_raw.data[[1]] <- xmlTreeParse(BOK_urllist[1], useInternalNodes = TRUE,encoding = "utf-8") # 생성한 URL 대로 XML 을 요청
BOK_rootNode[[1]] <- xmlRoot(BOK_raw.data[[1]])
BOK_total <- list()
for(i in 1:length(BOK_urllist)){
BOK_item <- list()
BOK_item_temp_dt <- data.table()
BOK_items <- BOK_rootNode[[i]]
BOK_size <- xmlSize(BOK_items) # 몇개의 item 이 있는지 확인
for(j in 1:BOK_size){
BOK_item_temp <- xmlSApply(BOK_items[[j]],xmlValue)
BOK_item_temp_dt <- data.table(VAR1=BOK_item_temp[1],
VAR2=BOK_item_temp[2],
VAR3=BOK_item_temp[3],
VAR4=BOK_item_temp[4],
VAR5=BOK_item_temp[5],
VAR6=BOK_item_temp[6],
VAR7=BOK_item_temp[7],
VAR8=BOK_item_temp[8],
VAR9=BOK_item_temp[9],
VAR10=BOK_item_temp[10],
VAR11=BOK_item_temp[11])
BOK_item[[j]]<-BOK_item_temp_dt
}
BOK_total[[i]] <- rbindlist(BOK_item)
}
RESULTS <- rbindlist(BOK_total)
RESULTS <- RESULTS[which(!is.na(RESULTS$VAR2)),]
RESULTS$VAR12 <- as.numeric(as.character(RESULTS$VAR10))
RESULTS$VAR13 <- as.numeric(as.character(RESULTS$VAR11))
names(RESULTS) <- c("STAT","STAT_note","ITEM1","ITEM1_note","ITEM2","ITEM2_note","ITEM3","ITEM3_note","VAR9","VAR10","VAR11","DATE","VALUE")
RESULTS$ITEMCODE <- paste0(RESULTS$ITEM1,RESULTS$ITEM2,RESULTS$ITEM3)
gsub(" ","",RESULTS$ITEMCODE)
return(RESULTS)
}
# 전체자료: 9.1.1.1 기업경기실사지수(BSI)-전국실적
BOK9111 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y013", # 9.1.1.1 기업경기실사지수(BSI)-전국실적
ITEM_1="?",ITEM_2="?",ITEM_3="?")
BOK9111_CAST <- cast(BOK9111,DATE~ITEMCODE, value = "VALUE" )
BOK9111_1 <- BOK9111_CAST[,c("DATE","C0000AA","Y9900AA","X5000AA","X6000AA")]
BOK9111_1 <- BOK9111_CAST[,c("DATE","C0000AA ")]
x <- "  Some text. "
x
trim(x)
tirms(x)
trimws(x)
MYBOK <- function(AUTH_KEY,REQ_TYPE,LANG,START_COUNT,END_COUNT,STAT_CODE,CYCLE_TYPE,START_DATE,END_DATE,ITEM_1,ITEM_2,ITEM_3){
BOK_urllist <- list()
BOK_urllist[[1]] <- paste0("http://ecos.bok.or.kr/api/StatisticSearch/",
AUTH_KEY,"/",REQ_TYPE,"/",LANG,"/",START_COUNT,"/",END_COUNT,"/",
STAT_CODE,"/",CYCLE_TYPE,"/",START_DATE,"/",END_DATE,"/",ITEM_1,"/",ITEM_2,"/",ITEM_3)
BOK_raw.data <- list()
BOK_rootNode <- list()
BOK_raw.data[[1]] <- xmlTreeParse(BOK_urllist[1], useInternalNodes = TRUE,encoding = "utf-8") # 생성한 URL 대로 XML 을 요청
BOK_rootNode[[1]] <- xmlRoot(BOK_raw.data[[1]])
BOK_total <- list()
for(i in 1:length(BOK_urllist)){
BOK_item <- list()
BOK_item_temp_dt <- data.table()
BOK_items <- BOK_rootNode[[i]]
BOK_size <- xmlSize(BOK_items) # 몇개의 item 이 있는지 확인
for(j in 1:BOK_size){
BOK_item_temp <- xmlSApply(BOK_items[[j]],xmlValue)
BOK_item_temp_dt <- data.table(VAR1=BOK_item_temp[1],
VAR2=BOK_item_temp[2],
VAR3=BOK_item_temp[3],
VAR4=BOK_item_temp[4],
VAR5=BOK_item_temp[5],
VAR6=BOK_item_temp[6],
VAR7=BOK_item_temp[7],
VAR8=BOK_item_temp[8],
VAR9=BOK_item_temp[9],
VAR10=BOK_item_temp[10],
VAR11=BOK_item_temp[11])
BOK_item[[j]]<-BOK_item_temp_dt
}
BOK_total[[i]] <- rbindlist(BOK_item)
}
RESULTS <- rbindlist(BOK_total)
RESULTS <- RESULTS[which(!is.na(RESULTS$VAR2)),]
RESULTS$VAR12 <- as.numeric(as.character(RESULTS$VAR10))
RESULTS$VAR13 <- as.numeric(as.character(RESULTS$VAR11))
names(RESULTS) <- c("STAT","STAT_note","ITEM1","ITEM1_note","ITEM2","ITEM2_note","ITEM3","ITEM3_note","VAR9","VAR10","VAR11","DATE","VALUE")
RESULTS$ITEMCODE <- trimws(paste0(RESULTS$ITEM1,RESULTS$ITEM2,RESULTS$ITEM3))
return(RESULTS)
}
# 전체자료: 9.1.1.1 기업경기실사지수(BSI)-전국실적
BOK9111 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y013", # 9.1.1.1 기업경기실사지수(BSI)-전국실적
ITEM_1="?",ITEM_2="?",ITEM_3="?")
BOK9111_CAST <- cast(BOK9111,DATE~ITEMCODE, value = "VALUE" )
BOK9111_1 <- BOK9111_CAST[,c("DATE","C0000AA","Y9900AA","X5000AA","X6000AA")]
View(BOK9111_1)
# 전체자료: 9.1.1.2 기업경기실사지수(BSI)-전국전망
BOK9112 <- MYBOK(AUTH_KEY="8YXOSADLRB7ZSISVACCO",REQ_TYPE="xml",LANG="kr",START_COUNT="1",END_COUNT="100000",
CYCLE_TYPE="MM",START_DATE="200301",END_DATE="201810",
STAT_CODE="041Y014", # 9.1.1.2 기업경기실사지수(BSI)-전국전망
ITEM_1="?",ITEM_2="?",ITEM_3="?")
BOK9112_CAST <- cast(BOK9112,DATE~ITEMCODE, value = "VALUE" )
TMP <- merge(BOK9111_CAST[,c("DATE","C0000AA","Y9900AA","X5000AA","X6000AA")], BOK9112_CAST[,c("DATE","C0000BA","Y9900BA","X5000BA","X6000BA")])
View(TMP)
TMP$YYYYMM <- TMP$DATE
TMP$DATE <- as.Date(as.character(TMP$YYYYMM*100+1), format = '%Y%m%d')
View(TMP)
plot.ts(TMP$C0000AA)
## 참고: http://otzslayer.github.io/r/jekyll-with-R-markdown/
## jekyll 블로그 디렉토리 설정
base <- "C:/Clouds/GitHub/Dr-HKim.github.io"
## Rmd 파일이 저장된 디렉토리 지정
rmds <- "_Rmd"
setwd(base)
blogdown:::insert_image_addin()
## 참고: http://otzslayer.github.io/r/jekyll-with-R-markdown/
## jekyll 블로그 디렉토리 설정
base <- "C:/Clouds/GitHub/Dr-HKim.github.io"
## Rmd 파일이 저장된 디렉토리 지정
rmds <- "_Rmd"
setwd(base)
## 참고: http://otzslayer.github.io/r/jekyll-with-R-markdown/
## jekyll 블로그 디렉토리 설정
base <- "C:/Clouds/GitHub/Dr-HKim.github.io"
## Rmd 파일이 저장된 디렉토리 지정
rmds <- "_Rmd"
setwd(base)
## Subfolder 에 있는 Rmd 파일 읽어오기
FILELIST <- list.files(path= "./_Rmd", pattern = ".*.Rmd") # subdirectory 에 있는 *.Rmd 파일 리스트 작성
## 폴더 경로 설정
figs.path <- "assets/article_images/"
figs.path <- "_Rmd/"
posts.path <- "_posts/"
require(knitr)
for (filename in FILELIST) {
# Rmd -> md 변환
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
# 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
# suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
# 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
}
## 참고: http://otzslayer.github.io/r/jekyll-with-R-markdown/
## jekyll 블로그 디렉토리 설정
base <- "C:/Clouds/GitHub/Dr-HKim.github.io"
## Rmd 파일이 저장된 디렉토리 지정
rmds <- "_Rmd"
setwd(base)
summary(cars)
summary(cars)
summary(cars)
plot(cars)
blogdown:::insert_image_addin()
## 참고: http://otzslayer.github.io/r/jekyll-with-R-markdown/
## jekyll 블로그 디렉토리 설정
base <- "C:/Clouds/GitHub/Dr-HKim.github.io"
## Rmd 파일이 저장된 디렉토리 지정
rmds <- "_Rmd"
setwd(base)
## Subfolder 에 있는 Rmd 파일 읽어오기
FILELIST <- list.files(path= "./_Rmd", pattern = ".*.Rmd") # subdirectory 에 있는 *.Rmd 파일 리스트 작성
## 폴더 경로 설정
figs.path <- "assets/article_images/"
posts.path <- "_posts/R/"
require(knitr)
for (filename in FILELIST) {
# Rmd -> md 변환
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
# 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
# suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
# 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
}
this.dir <- dirname(parent.frame(2)$ofile)
getSrcDirectory()
sys.frame(1)$ofile
sys.frame(1)
?render_jekyll()
render_jekyll(highlight = "pygments")
